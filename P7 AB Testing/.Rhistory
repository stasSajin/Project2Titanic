library(devtools)
devtools::install_github("wesm/feather/R")
devtools::install_github("wesm/feather/R")
library(eyetrackerR)
library(eyetrackerR)
library("eyetrackingR", lib.loc="C:/Program Files/R/R-3.2.3/library")
analyze_time_clusters()
UseMethod("analyze_time_clusters")
methods(analyze_time_clusters)
methods(analyze_time_clusters.time_cluster_data)
?methods
methods(analyze_time_clusters)
getAnywhere('analyze_time_clusters')
getAnywhere('analyze_time_clusters')
getAnywhere('analyze_time_clusters.default')
getMethod(analyze_time_clusters)
methods(analyze_time_clusters)
>methods
?methods
methods(analyze_time_clusters)
getAnywhere(analyze_time_clusters.time_cluster_data)
edit(getAnywhere(analyze_time_clusters.time_cluster_data))
?analyze_time_clusters
p=300/2000
z=2.57
se=sqrt(p*(1-p)/2000)
z*se
p+z*se
p-z*se
974/10072
1242/9886
.1256322-.09670373
p=.111
z=1.96
se=.00445
0.02892847+z*se
0.02892847-z*se
z*se
data=c(87029, 113407, 84843, 104994, 99327, 92052, 60684)
mean(data)
sd(data)
se=sd(data)/sqrt(7)
mean(data)+z*se
mean(data)-z*se
pPool=(2500+2500)/(100000)
pPool=(2500+2500+302+374)/(100000+6021+5979)
sqrt(pPool*(1-pPool)*(1/(50000+6021)+1/(50000+5979)))
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
j
h
h
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
required_size(s=0.00515*sqrt(5000), d_min=0.02)
required_size(s=0.0119*sqrt(5000), d_min=0.02)
15312/(15348+15312)
.5+1.96*sqrt((.5*.5)/(15348+15312))
.5-1.96*sqrt((.5*.5)/(15348+15312))
15348/(15348+15312)
Xs_cont <- c(196, 200, 200, 216, 212, 185, 225, 187, 205, 211, 192, 196, 223, 192)
Ns_cont <- c(2029, 1991, 1951, 1985, 1973, 2021, 2041, 1980, 1951, 1988, 1977, 2019, 2035, 2007)
Xs_exp <- c(179, 208, 205, 175, 191, 291, 278, 216, 225, 207, 205, 200, 297, 299)
Ns_exp <- c(1971, 2009, 2049, 2015, 2027, 1979, 1959, 2020, 2049, 2012, 2023, 1981, 1965, 1993)
controlCTR<-Xs_cont/Ns_cont
expCTR<-Xs_exp/Ns_exp
controlCTR
expSum<-sum(Ns_exp)
contSum<-sum(Ns_cont)
contSum
(.0035*sqrt(1/(expSum)+1/(expCTR)))/sqrt(2/10000)
expSum
(.0035*sqrt(1/(expSum)+1/(contSum)))/sqrt(2/10000)
se<-(.0035*sqrt(1/(expSum)+1/(contSum)))/sqrt(2/10000)
se<-(.0062*sqrt(1/(expSum)+1/(contSum)))/sqrt(2/5000)
se
1.96*se
-1.96*se
sum(Xs_exp)/sum(Ns_cont)-sum(Xs_cont)/sum(Ns_cont)
d_hat<-sum(Xs_exp)/sum(Ns_cont)-sum(Xs_cont)/sum(Ns_cont)
d_hat+1.96*se
d_hat-1.96*se
sum(expCTR>controlCTR)
expSum
contSum
sum(Xs_exp)/sum(Ns_cont)
sum(Xs_cont)/sum(Ns_cont)
d_hat
expSum
se
expCTR<-Xs_exp/Ns_exp
expCTR
d_hat<-sum(Xs_exp)/sum(Ns_exp)-sum(Xs_cont)/sum(Ns_cont)
d_hat+1.96*se
d_hat-1.96*se
d_hat
1-.95^3
1-.95^10
1-.99^10
.03/.013
.5/.21
install.packages("rmarkdown")
install.packages("hunspell")
setwd("C:/everything/Classes/UdacityNanodegrees/DataAnalyst/UdacityDataAnalystNanodegree/P7 AB Testing")
baseline<-read.csv("baselineInfo.csv")
data<-read.csv("data.csv")
ppnd<-function (p) {
options("scipen"=999)
a0 = 2.50662823884
a1 = -18.61500062529
a2 = 41.39119773534
a3 = -25.44106049637
b1 = -8.47351093090
b2 = 23.08336743743
b3 = -21.06224101826
b4 = 3.13082909833
c0 = -2.78718931138
c1 = -2.29796479134
c2 = 4.85014127135
c3 = 2.32121276858
d1 = 3.54388924762
d2 = 1.63706781897
r=0
value=0
split = 0.42
#0.08 < P < 0.92
if(abs(p-0.5)<= split) {
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
#P < 0.08 or P > 0.92,  R = min ( P, 1-P )
else if( 0.0 < p | p < 1.0 ) {
if ( 0.5 < p ) {
r = sqrt(-log(1.0 - p))
} else {
r = sqrt(-log(p))
}
value = ((( c3   * r + c2 ) * r+ c1 ) * r+ c0 ) /
( (d2 * r + d1 ) * r+ 1.0 )
if ( p < 0.5 )
{
value = - value
}
}
return(value)
}
samplesize <- function(alpha, beta, p, dmin) {
options("scipen"=999)
t.alpha <- ppnd(1.0 - alpha/2)
t.beta <- ppnd(1 - beta)
if(p>.5){
p=(1-p)
}
se.null.numerator <- sqrt(2*p*(1 - p))
se.alt.numerator <- sqrt(p*(1 - p) + (p + dmin)*(1 - p - dmin))
n <- (t.alpha*se.null.numerator + t.beta*se.alt.numerator)^2 / (dmin)^2
return(round(n))
}
options("scipen"=999)
grossConversionSize<-samplesize(0.05/3,.2,.20625,.01)
View(data)
grossConversionSize<-samplesize(0.0,.2,.20625,.01)
retentionSize<-samplesize(0.0,.2,.53,.01)
netConversionSize<-samplesize(0.05,.2,.1093125,.0075)
baseline<-read.csv("baselineInfo.csv")
data<-read.csv("data.csv")
ppnd<-function (p) {
options("scipen"=999)
a0 = 2.50662823884
a1 = -18.61500062529
a2 = 41.39119773534
a3 = -25.44106049637
b1 = -8.47351093090
b2 = 23.08336743743
b3 = -21.06224101826
b4 = 3.13082909833
c0 = -2.78718931138
c1 = -2.29796479134
c2 = 4.85014127135
c3 = 2.32121276858
d1 = 3.54388924762
d2 = 1.63706781897
r=0
value=0
split = 0.42
#0.08 < P < 0.92
if(abs(p-0.5)<= split) {
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
#P < 0.08 or P > 0.92,  R = min ( P, 1-P )
else if( 0.0 < p | p < 1.0 ) {
if ( 0.5 < p ) {
r = sqrt(-log(1.0 - p))
} else {
r = sqrt(-log(p))
}
value = ((( c3   * r + c2 ) * r+ c1 ) * r+ c0 ) /
( (d2 * r + d1 ) * r+ 1.0 )
if ( p < 0.5 )
{
value = - value
}
}
return(value)
}
samplesize <- function(alpha, beta, p, dmin) {
options("scipen"=999)
t.alpha <- ppnd(1.0 - alpha/2)
t.beta <- ppnd(1 - beta)
if(p>.5){
p=(1-p)
}
se.null.numerator <- sqrt(2*p*(1 - p))
se.alt.numerator <- sqrt(p*(1 - p) + (p + dmin)*(1 - p - dmin))
n <- (t.alpha*se.null.numerator + t.beta*se.alt.numerator)^2 / (dmin)^2
return(round(n))
}
grossConversionSize<-samplesize(0.05,.2,.20625,.01)
retentionSize<-samplesize(0.05,.2,.53,.01)
netConversionSize<-samplesize(0.05,.2,.1093125,.0075)
gsSize<-round(grossConversionSize*2/.08)
rSize<-round(retentionSize*2/.0165) #.0165 represents the ratio of cookies to enrolls.
ncSize<-round(netConversionSize*2/.08)
685325/40000
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=round(p+z*se,6)
LCI=round(p-z*se,6)
observed=round(sum(Control/(sum(Exp)+sum(Control))),6)
if (observed<=UCI & observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
control<-subset(data, Group=="Control")
experimental<-subset(data, Group=="Experimental")
pageviewsCI<-ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
pageviewsCI
clicksCI<-ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
clicksCI
pControl<-mean(control$Clicks/control$Pageviews)
seControl<-sqrt(pControl*(1-pControl)/sum(control$Pageviews))
UCI<-round(pControl+1.96*seControl,6)
LCI<-round(pControl-1.96*seControl,6)
observed<-round(mean(experimental$Clicks/experimental$Pageviews),6)
ctrCI<-paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: Passes sanity check")
ctrCI
View(data)
dataComplete<-na.omit(data)
dataComplete$GrossConversion<-dataComplete$Enrollments/dataComplete$Clicks
dataComplete$NetRetention<-dataComplete$Payments/dataComplete$Clicks
cor.test(dataComplete$GrossConversion,dataComplete$NetRetention)
ggplot(dataComplete, aes(x=GrossConversion y=NetRetention))+geom_point()
library(ggplot2)
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+geom_point()
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+geom_point()+theme_minimal()
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+
geom_point()+
theme_minimal()+
geom_line(method="lm")
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+
geom_point()+
theme_minimal()+
geom_line(methods="lm")
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+
geom_point()+
theme_minimal()+
geom_smooth(methods="lm")
ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+
geom_point()+
theme_minimal()+
geom_smooth(method="lm")
plot<-ggplot(dataComplete, aes(x=GrossConversion, y=NetRetention))+
geom_point()+
theme_minimal()+
geom_smooth(method="lm")+
ggtitle("Positive relationship between gross conversion and net conversion")
cor.test(dataComplete$GrossConversion,dataComplete$NetRetention)
dataControl<-subset(dataComplete, Group=="Control")
dataExperimental<-subset(dataComplete, Group=="Experimental")
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalR-controlR
se=sqrt((controlR*(1-controlR))/controlN +
(experimentalR*(1-experimentalR))/experimentalN)
UCI=round(d+z*se,6)
LCI=round(d-z*se,6)
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
gsResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=-.01,
z=2.1281)
ncResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Payments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=-.0075,
z=2.1281)
gsResults
gsResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=-.01,
z=1.96)
ncResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Payments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=-.0075,
z=1.96)
gsResults
ncResults
setwd("C:/everything/Classes/UdacityNanodegrees/DataAnalyst/UdacityDataAnalystNanodegree/P7 AB Testing")
install.packages("rmdformats")
install.packages("syuzhet")

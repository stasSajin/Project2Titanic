c1 = -2.29796479134
c2 = 4.85014127135
c3 = 2.32121276858
d1 = 3.54388924762
d2 = 1.63706781897
r=0
value=0
split = 0.42
if(abs(p-0.5)<= split & p<=.5) {
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
else if(abs(p-0.5)<= split & p>.5) {
p=1-p
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
else if(abs(p-0.5)<= split & p>.5) {
p=1-p
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
p=.025
ppnd<-function (p) {
a0 = 2.50662823884
a1 = -18.61500062529
a2 = 41.39119773534
a3 = -25.44106049637
b1 = -8.47351093090
b2 = 23.08336743743
b3 = -21.06224101826
b4 = 3.13082909833
c0 = -2.78718931138
c1 = -2.29796479134
c2 = 4.85014127135
c3 = 2.32121276858
d1 = 3.54388924762
d2 = 1.63706781897
r=0
value=0
split = 0.42
#0.08 < P < 0.92
if(abs(p-0.5)<= split) {
r = (p - 0.5)^2
value = (p - 0.5) * (((a3 * r + a2) * r + a1 ) * r+ a0 ) /
((((b4 * r+ b3 ) * r+ b2 ) * r+ b1 ) * r+ 1.0)
}
#P < 0.08 or P > 0.92,  R = min ( P, 1-P )
else if( 0.0 < p | p < 1.0 ) {
if ( 0.5 < p ) {
r = sqrt(-log(1.0 - p))
} else {
r = sqrt(-log(p))
}
value = ((( c3   * r + c2 ) * r+ c1 ) * r+ c0 ) /
( (d2 * r + d1 ) * r+ 1.0 )
if ( p < 0.5 )
{
value = - value
}
}
return(value)
}
samplesize <- function(alpha, beta, p, dmin) {
t.alpha <- ppnd(1.0 - alpha/2)
t.beta <- ppnd(1 - beta)
if(p>.5){
p=(1-p)
}
se.null.numerator <- sqrt(2*p*(1 - p))
se.alt.numerator <- sqrt(p*(1 - p) + (p + dmin)*(1 - p - dmin))
n <- (t.alpha*se.null.numerator + t.beta*se.alt.numerator)^2 / (dmin)^2
return(round(n))
}
samplesize(.05,.2,.20625,.01)
samplesize(.05,.2,.53,.01)
grossConversionSize<-samplesize(0.0275,.2,.20625,.01)
retentionSize<-samplesize(0.0275,.2,.53,.01)
netConversionSize<-samplesize(0.0275,.2,.53,.00075)
netConversionSize
retentionSize
grossConversionSize
gsSize<-grossConversionSize*2/.08
rSize<-retentionSize*2/.0165 #.0165 represents the ratio of cookies to enrolls.
ncSize<-netConversionSize*2/.08
gsSize
rSize
ncSize
grossConversionSize<-samplesize(0.0275,.2,.20625,.01)
retentionSize<-samplesize(0.0275,.2,.53,.01)
netConversionSize<-samplesize(0.0275,.2,.53,.00075)
gsSize<-round(grossConversionSize*2/.08)
rSize<-round(retentionSize*2/.0165) #.0165 represents the ratio of cookies to enrolls.
ncSize<-round(netConversionSize*2/.08)
$n_{grossConversion}$ = `r gsSize`;
netConversionSize<-samplesize(0.0275,.2,.53,.0075)
ncSize<-round(netConversionSize*2/.08)
rSize
5604242/40000
4741213/140
4741213/40000
5,604,242/40000
5604242/40000
140/30
p.adjust(c(.05,.05), method="BV")
p.adjust(c(.05,.05), method="BY")
p.adjust(c(.03,.03), method="BY")
p.adjust(c(.035,.035), method="BY")
p.adjust(c(.0325,.0325), method="BY")
p.adjust(c(.033,.033), method="BY")
p.adjust(c(.0335,.0335), method="BY")
p.adjust(c(.0333,.0333), method="BY")
p.adjust(c(.03332,.03332), method="BY")
p.adjust(c(.03334,.03334), method="BY")
p.adjust(c(.03333,.03333), method="BY")
grossConversionSize<-samplesize(.03333,.2,.20625,.01)
netConversionSize<-samplesize(.03333,.2,.1093125,.0075)
grossConversionSize
netConversionSize
gsSize<-round(grossConversionSize*2/.08)
ncSize<-round(netConversionSize*2/.08)
gsSize
ncSize
options(scipen=999)
769675/40000
data<-read.csv("data.csv")
library(dplyr)
str(data)
data %>% group_by(Group) %>%
summarise(totalCookies=sum(Pageviews),
totalClicks=sum(Clicks))
345543/344660
344660/(344660+345543)
1-0.49936
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
return(c(LCI,UCI))
}
View(data)
control<-subset(data, Group=="Control")
View(data)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
observed=sum(Control/(sum(Exp)+sum(Control)))
if (observed<=UCI | oberved >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(c(LCI,UCI), pass)
}
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
experimental<-subset(data, Group=="Experimental")
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
observed=sum(Control/(sum(Exp)+sum(Control)))
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(c(LCI,UCI), pass)
}
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
observed=sum(Control/(sum(Exp)+sum(Control)))
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(c(LCI,UCI,pass))
}
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
observed=sum(Control/(sum(Exp)+sum(Control)))
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
View(data)
options(digits = 5)
ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
ci<-function(z=1.96, Exp, Control, p) {
options(digits = 5)
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=p+z*se
LCI=p-z*se
observed=sum(Control/(sum(Exp)+sum(Control)))
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
control<-subset(data, Group=="Control")
experimental<-subset(data, Group=="Experimental")
ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=round(p+z*se,6)
LCI=round(p-z*se,6)
observed=round(sum(Control/(sum(Exp)+sum(Control))),6)
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
control<-subset(data, Group=="Control")
experimental<-subset(data, Group=="Experimental")
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=round(p+z*se,6)
LCI=round(p-z*se,6)
observed=round(sum(Control/(sum(Exp)+sum(Control))),6)
if (observed<=UCI | observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
control<-subset(data, Group=="Control")
experimental<-subset(data, Group=="Experimental")
ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
sum(experimental$Clicks)
sum(control$Clicks)
.5*.5/(28378+28325)
sqrt(0.0000044089)
ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
pollP<-(experimental$Clicks+control$Clicks)/(experimental$Pageviews+control$Pageviews)
pollP<-mean((experimental$Clicks+control$Clicks)/(experimental$Pageviews+control$Pageviews))
ctrCI<-ci(Exp=experimental$Clicks, Control=control$Clicks, p=pollP)
ctrCI
ci(Exp=1, Control=control$Clicks, p=pollP)
ci<-function(z=1.96, Exp, Control, p) {
se=sqrt(p*(1-p)/(sum(Exp)+sum(Control)))
UCI=round(p+z*se,6)
LCI=round(p-z*se,6)
observed=round(sum(Control/(sum(Exp)+sum(Control))),6)
if (observed<=UCI & observed >=LCI){
pass="Passes sanity test"
} else {pass="Failed sanity test"}
return(paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: ",pass))
}
control<-subset(data, Group=="Control")
experimental<-subset(data, Group=="Experimental")
pageviewsCI<-ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=.5)
clicksCI<-ci(Exp=experimental$Clicks, Control=control$Clicks, p=.5)
pageviewsCI
clicksCI
ctrCI<-ci(Exp=experimental$Pageviews, Control=control$Pageviews, p=pollP)
ctrCI
pControl<-mean(control$Clicks/control$Pageviews)
sum(control$Pageviews)
seControl<-sqrt(pControl-(1-pControl)/sum(control$Pageviews))
UCI<-pcontrol+1.96*seControl
UCI<-pControl+1.96*seControl
LCI<-pControl-1.96*seControl
observed<-mean(experimental$Clicks/experimental$Pageviews)
UCI
seControl<-sqrt(pControl*(1-pControl)/sum(control$Pageviews))
UCI<-pControl+1.96*seControl
LCI<-pControl-1.96*seControl
observed<-mean(experimental$Clicks/experimental$Pageviews)
UCI
ctrCI<-paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: Passes sanity check"))
ctrCI<-paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: Passes sanity check")
ctrCI
options(digits = 6)
pControl<-mean(control$Clicks/control$Pageviews)
UCI<-pControl+1.96*seControl
seControl<-sqrt(pControl*(1-pControl)/sum(control$Pageviews))
LCI<-pControl-1.96*seControl
observed<-mean(experimental$Clicks/experimental$Pageviews)
ctrCI<-paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: Passes sanity check")
ctrCI
#first, calculate ratio for control
pControl<-mean(control$Clicks/control$Pageviews)
seControl<-sqrt(pControl*(1-pControl)/sum(control$Pageviews))
UCI<-round(pControl+1.96*seControl,6)
LCI<-round(pControl-1.96*seControl,6)
observed<-round(mean(experimental$Clicks/experimental$Pageviews),6)
ctrCI<-paste("95% CI:[",LCI,UCI,"] ","Observed Value: ",
observed," Conclusion: Passes sanity check")
ctrCI
.03333/2
View(control)
sum(control$Clicks)
View(control)
View(control)
controlTwoWeeks<-complete.cases(control)
View(control)
controlTwoWeeks<-na.omit(control)
experimentalTwoWeeks<-na.omit(experimental)
View(controlTwoWeeks)
control23days<-na.omit(control)
experimental23days<-na.omit(experimental)
sum(control23days$Clicks)
dataComplete<-na.omit(data)
dataComplete$GrossConversion<-dataComplete$Enrollments/dataComplete$Clicks
dataComplete$NetRetention<-dataComplete$Payments/dataComplete$Clicks
dataControl<-subset(dataComplete, Group=="Control")
dataExperimental<-subset(dataComplete, Group=="Experimental")
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalN-controlR
se=sqrt(controlR*(1-controlR)/controlN +
experimentalR*(1-experimentalR)/experimentalN)
UCI=d+z*se
LCI=d-z*se
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=mean(dataControl$GrossConversion),
experimentalR = mean(dataExperimental$NetRetention),
dmin=.01)
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalR-controlR
se=sqrt(controlR*(1-controlR)/controlN +
experimentalR*(1-experimentalR)/experimentalN)
UCI=d+z*se
LCI=d-z*se
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=mean(dataControl$GrossConversion),
experimentalR = mean(dataExperimental$NetRetention),
dmin=.01)
mean(dataControl$GrossConversion)
mean(dataExperimental$GrossConversion)
sum(dataExperimental$Clicks)
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalR-controlR
se=sqrt((controlR*(1-controlR))/controlN +
(experimentalR*(1-experimentalR))/experimentalN)
UCI=d+z*se
LCI=d-z*se
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=mean(dataControl$GrossConversion),
experimentalR = mean(dataExperimental$NetRetention),
dmin=.01)
sum(dataControl$Enrollments)
3785/17293
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlN=sum(dataControl$Clicks),
controlR=mean(dataControl$GrossConversion),
experimentalR = mean(dataExperimental$NetRetention),
dmin=.01)
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalR-controlR
se=sqrt((controlR*(1-controlR))/controlN +
(experimentalR*(1-experimentalR))/experimentalN)
UCI=d+z*se
LCI=d-z*se
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$GrossConversion)/controlN,
experimentalR = mean(dataExperimental$NetRetention)/experimentalN,
dmin=.01)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$GrossConversion)/sum(dataControl$Clicks),
experimentalR = mean(dataExperimental$NetRetention)/sum(dataExperimental$Clicks),
dmin=.01)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$GrossConversion)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$NetRetention)/sum(dataExperimental$Clicks),
dmin=.01)
controlN=sum(dataControl$Clicks)
sum(dataControl$Clicks)
sum(dataExperimental$Clicks)
sum(dataControl$GrossConversion)/sum(dataControl$Clicks)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=.01)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=.01)
sum(dataControl$Clicks)
sum(dataExperimental$Clicks)
sum(dataControl$Enrollments)/sum(dataControl$Clicks)
sum(dataExperimental$Payments)/sum(dataExperimental$Clicks)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=.01)
testMetric<-function(z=1.96,
controlN, experimentalN, controlR, experimentalR, dmin){
d=experimentalR-controlR
se=sqrt((controlR*(1-controlR))/controlN +
(experimentalR*(1-experimentalR))/experimentalN)
UCI=round(d+z*se,6)
LCI=round(d-z*se,6)
if (0<=UCI & 0>=LCI){
pass="Fail to reject the null of no difference"
} else if(dmin<=UCI & dmin>=LCI) {
pass="Fail to reject the dmin threshold"
} else {
pass="The effect is significant for both d=0 and dmin"
}
return(paste("95% CI:[",LCI,UCI,"] ",
" Conclusion: ", pass))
}
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=.01)
testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=-.01)
gsResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Enrollments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Enrollments)/sum(dataExperimental$Clicks),
dmin=-.01,
z=2.1281)
ncResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Payments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=-.0075,
z=2.1281)
ncResults
ncResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Payments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=-.0075,
z=1.96)
ncResults
ncResults<-testMetric(controlN=sum(dataControl$Clicks),
experimentalN = sum(dataExperimental$Clicks),
controlR=sum(dataControl$Payments)/sum(dataControl$Clicks),
experimentalR = sum(dataExperimental$Payments)/sum(dataExperimental$Clicks),
dmin=-.0075,
z=2.1281)
ncResults
p.adjust(c(.0026,.06776),method="BY")
p.adjust(c(.0026,.6776),method="BY")
View(experimentalTwoWeeks)
